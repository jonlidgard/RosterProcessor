#!/bin/bash


APP_NAME=          # short-name, jar and xpi files name. Must be lowercase with no spaces
CHROME_PROVIDERS=  # which chrome providers we have (space-separated list)
CLEAN_UP=          # delete the jar / "files" when done?       (1/0)
ROOT_FILES=        # put these files in root of xpi (space separated list of leaf filenames)
ROOT_DIRS=         # ...and these directories       (space separated list)
RDF_TEMPLATE=
RDF_PRESIGN=
BEFORE_BUILD=/usr/local/bin/xpi_pre_build      # run this before building       (bash command)
AFTER_BUILD=/usr/local/bin/xpi_post_build       # ...and this after the build    (bash command)


if [ -z $1 ]; then
  . ./config_build.sh
else
  . $1
fi

if [ -z $APP_NAME ]; then
  echo "You need to create build config file first!"
  echo "Read comments at the beginning of this script for more info."
  exit;
fi

ROOT_DIR=`pwd`
TMP_DIR=.build

#uncomment to debug
#set -x

# remove any left-over files from previous build
rm -f $APP_NAME.jar $APP_NAME.xpi files
rm -rf $TMP_DIR

# $BEFORE_BUILD

mkdir -pv $TMP_DIR/chrome

# generate the JAR file, excluding CVS, SVN, and temporary files
JAR_FILE=$TMP_DIR/chrome/$APP_NAME.jar
echo "Generating $JAR_FILE..."
for CHROME_SUBDIR in $CHROME_PROVIDERS; do
  find $CHROME_SUBDIR \( -path '*CVS*' -o -path '*.svn*' \) -prune -o -type f -print | grep -v \~ >> files
done

zip -0 -r -X $JAR_FILE -@ < files
# The following statement should be used instead if you don't wish to use the JAR file
#cp -pv `cat files` $TMP_DIR/chrome

# prepare components and defaults
echo "Copying various files to $TMP_DIR folder..."
for DIR in $ROOT_DIRS; do
  mkdir $TMP_DIR/$DIR
  FILES="`find $DIR \( -path '*CVS*' -o -path '*.svn*' \) -prune -o -type f -print | grep -v \~`"
  echo $FILES >> files
  cp -pv $FILES $TMP_DIR
done


mv chrome.manifest chrome.manifest.tmp
cp chrome.manifest.deploy_version chrome.manifest

# Copy other files to the root of future XPI.
for ROOT_FILE in $ROOT_FILES install.rdf chrome.manifest; do
  cp -v $ROOT_FILE $TMP_DIR
  if [ -f $ROOT_FILE ]; then
    echo $ROOT_FILE >> files
  fi
done

mv chrome.manifest.tmp chrome.manifest

cd $TMP_DIR

echo "Generating $APP_NAME.xpi..."
zip -r -X ../$APP_NAME.xpi *

cd "$ROOT_DIR"

echo "Generating sha1 hash..."

if [ -z $RDF_TEMPLATE ]; then
 echo "No RDF Template found, skipping...."
else
 HASH=`sha1 $APP_NAME.xpi | cut -d\  -f 2`
 echo "sha1 hash:" $HASH
# echo `cat $RDF_TEMPLATE | sed s/sha1:[a-f0-9\-]+</sha1:$HASH</ > $RDF_PRESIGN`
 echo `cat $RDF_TEMPLATE | sed s/sha1:HASH_HERE/sha1:$HASH/ > $RDF_PRESIGN`
fi
echo "Cleanup..."

#if [ $CLEAN_UP = 0 ]; then
  # save the jar file
#  mv $TMP_DIR/chrome/$APP_NAME.jar .
#else
#  rm ./files
#fi

# remove the working files
#rm -rf $TMP_DIR
echo "Done!"

# $AFTER_BUILD
